security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email # ou "username" si login avec username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            stateless: false              # ✅ indispensable pour garder la session
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: false      # ← TEMPORAIRE pour tester
                csrf_token_id: authenticate       # ← doit matcher le Twig
                csrf_parameter: _csrf_token       # ← doit matcher le name du champ
                username_parameter: email   # ✅ noms des champs du form
                password_parameter: password
                default_target_path: app_home  # ✅ où aller après succès (route "/")
            logout:
                path: app_logout
                target: app_login   # après déconnexion -> page login
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    # ✅ Routes publiques (aucune connexion requise)
    - { path: ^/$, roles: PUBLIC_ACCESS }                 # Accueil
    - { path: ^/recherche, roles: PUBLIC_ACCESS }         # Page de recherche
    - { path: ^/login, roles: PUBLIC_ACCESS }             # Connexion
    - { path: ^/register, roles: PUBLIC_ACCESS }          # Inscription
    - { path: ^/logout, roles: PUBLIC_ACCESS }            # Déconnexion publique (technique)
    - { path: ^/recipe/?$, roles: PUBLIC_ACCESS }         # Liste des recettes
    - { path: ^/recipe/\d+$, roles: PUBLIC_ACCESS }       # Détail d’une recette

    # 🔒 Routes protégées
    - { path: ^/recipe/new, roles: ROLE_USER }
    - { path: ^/recipe/\d+/(edit|delete), roles: ROLE_USER }
    - { path: ^/category, roles: ROLE_USER }
    - { path: ^/profil, roles: ROLE_USER }

    # 🚫 Tout le reste nécessite d'être connecté
    - { path: ^/, roles: ROLE_USER }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
